services:
  excalidraw:
    build:
      context: .
      dockerfile: Dockerfile.prod
      network: host
      args:
        GIT_COMMIT_SHA_CLIENT: ${GIT_COMMIT_SHA_CLIENT}
    container_name: excalidraw
    healthcheck:
      disable: true
    environment:
      - NODE_ENV=production
    restart: on-failure
    labels:
      - "traefik.enable=true"
      - "traefik.docker.network=${TRAEFIK_NETWORK}"

      - "traefik.http.routers.frontend.entrypoints=websecure"
      - "traefik.http.routers.frontend.rule=Host(`example.com`)"
      - "traefik.http.routers.frontend.tls=true"
      - "traefik.http.routers.frontend.tls.certresolver=leresolver"

      - "traefik.http.services.frontend.loadbalancer.server.port=8080"
      - "traefik.http.routers.frontend.service=frontend"

      - "traefik.http.routers.frontend.middlewares=web-auth"
    networks:
      - traefik

  excalidraw-storage-backend:
    build:
      context: https://github.com/kitsteam/excalidraw-storage-backend.git#${GIT_TAG_STORAGE_BACKEND}
      target: production
      network: host
    environment:
      STORAGE_URI: redis://:${REDIS_PASSWORD}@redis:6379
      STORAGE_TTL: 2592000000
    depends_on:
      redis:
        condition: service_healthy
    restart: always
    labels:
      - "traefik.enable=true"
      - "traefik.docker.network=${TRAEFIK_NETWORK}"

      - "traefik.http.routers.backend.entrypoints=websecure"
      - "traefik.http.routers.backend.rule=Host(`backend.example.com`)"
      - "traefik.http.routers.backend.tls=true"
      - "traefik.http.routers.backend.tls.certresolver=leresolver"

      - "traefik.http.services.backend.loadbalancer.server.port=8080"
      - "traefik.http.routers.backend.service=backend"

      - "traefik.http.middlewares.cors_excalidraw.headers.accesscontrolalloworiginlist=https://example.com"
      - "traefik.http.middlewares.cors_excalidraw.headers.accesscontrolallowmethods=GET,OPTIONS,PUT,POST,DELETE"
      - "traefik.http.middlewares.cors_excalidraw.headers.accesscontrolallowheaders=*"
      - "traefik.http.routers.backend.middlewares=cors_excalidraw"
    networks:
      - traefik
      - db

  excalidraw-room:
    image: excalidraw/excalidraw-room
    restart: always
    environment:
      CORS_ORIGIN: https://example.com
    labels:
      - "traefik.enable=true"
      - "traefik.docker.network=${TRAEFIK_NETWORK}"

      - "traefik.http.routers.room.entrypoints=websecure"
      - "traefik.http.routers.room.rule=Host(`room.example.com`)"
      - "traefik.http.routers.room.tls=true"
      - "traefik.http.routers.room.tls.certresolver=leresolver"

      - "traefik.http.services.room.loadbalancer.server.port=80"
      - "traefik.http.routers.room.service=room"
    networks:
      - traefik

  redis:
    image: redis
    command: redis-server --requirepass ${REDIS_PASSWORD}
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "-a", "${REDIS_PASSWORD}", "ping"]
      interval: 30s
      timeout: 10s
      retries: 5
    restart: always
    networks:
      - db

networks:
  db:
  traefik:
    external: true
    name: ${TRAEFIK_NETWORK}

volumes:
  redis_data:
